#!/usr/bin/env bash

source test_lib

# Restarting fd_server.
./functional -c &>/dev/null
check_exit $? "close_server"
./functional -o &>/dev/null
check_exit $? "start_server"

# Pre-opening interface that will be needed. This is needed to avoid a race
# condition between the sending and receiving ports.
./functional -i vale0:v0 &>/dev/null
check_exit $? "pre-open vale0:v0"
./functional -i vale0:v1 &>/dev/null
check_exit $? "pre-open vale0:v1"
./functional -i vale0:v2 &>/dev/null
check_exit $? "pre-open vale0:v2"

# First send, every port should receive the frame.
./functional -i vale0:v0 -r 100:c -T 1 -s 10:10:10:10:10:10 &>/dev/null &
p1=$!
./functional -i vale0:v1 -r 100:c -T 1 -s 10:10:10:10:10:10 &>/dev/null &
p2=$!
./functional -i vale0:v2 -t 100:c -s 10:10:10:10:10:10 &>/dev/null
e3=$?
wait $p1
e1=$?
wait $p2
e2=$?
check_exit $e1 "receive vale0:v0"
check_exit $e2 "receive vale0:v1"
check_exit $e3 "send vale0:v2"

# Second send, only v2 should receive the frame.
./functional -i vale0:v2 -r 100:c -T 1 -d 10:10:10:10:10:10 &>/dev/null &
p4=$!
./functional -i vale0:v1 -r 100:c -T 1 -d 10:10:10:10:10:10 -n &>/dev/null &
p5=$!
./functional -i vale0:v0 -t 100:c -d 10:10:10:10:10:10 &>/dev/null
e6=$?
wait $p4
e4=$?
wait $p5
e5=$?
check_exit $e1 "receive vale0:v0"
check_exit $e2 "receive vale0:v1"
check_exit $e3 "send vale0:v2"

# echo "================================================================================"
echo "Test successful."
exit 0