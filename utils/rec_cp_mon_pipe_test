#!/usr/bin/env bash
################################################################################
# Test objective: check if receiving copy monitors correctly block VALE pipes
#                 from receiving.
# Operations:
# 0) restart fd_server to have a clean starting state
# 1) create a pair of VALE pipes (pipe{1, pipe}1).
# 3) open a receiving copy monitor pipe{1/r for pipe{1.
# 4) send from pipe}1 without receiving from pipe{1/r, check that pipe{1 doesn't
#    receive the frame.
# 5) receive from pipe{1/r, check that pipe{1 receives the frame.
################################################################################
source test_lib

restart_fd_server

# Pre-opening interface that will be needed. This is needed to avoid a race
# condition between the sending and receiving ports.
./functional -i "netmap:pipe{1"   &>/dev/null
check_exit $? "pre-open netmap:pipe{1"
./functional -i "netmap:pipe{1/r" &>/dev/null
check_exit $? "pre-open netmap:pipe{1/r"
./functional -i "netmap:pipe}1"   &>/dev/null
check_exit $? "pre-open netmap:pipe}1"

# Initially we don't receive with the monitor, therefore pipe{1 should not
# receive the frame.
./functional -i netmap:pipe{1 -r 150:d -n &>/dev/null &
p1=$!
./functional -i netmap:pipe}1 -t 150:d    &>/dev/null
e2=$?
wait $p1
e1=$?
check_exit $e1 "no-receive netmap:pipe{1"
check_exit $e2 "send vale0:v1"

# Now we receive with the monitor, therefore pipe{1 should receive the frame.
./functional -i "netmap:pipe{1"   -r 150:d &>/dev/null &
p3=$!
./functional -i "netmap:pipe{1/r" -r 150:d &>/dev/null
e4=$?
wait $p3
e3=$?
check_exit $e3 "receive netmap:pipe{1"
check_exit $e4 "receive netmap:pipe{1/r"

echo "Test successful."