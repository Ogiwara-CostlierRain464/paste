#!/usr/bin/env bash
################################################################################
# Test objective: check if a send copy monitor receives frames when its monitored
#                 VALE port is sending.
# Operations:
# 0) restart fd_server to have a clean starting state
# 1) create a persistent VALE port (v0).
# 2) connect v0 and a VALE ephimeral port (v1) to the same VALE switch.
# 3) open a send copy monitor v0/t for v0.
# 4) send from v0, check that both v0/t and v1 receive the frame.
################################################################################
source test_lib

parse_send_recv_arguments "$@"
fill="${fill:-d}"
len="${len:-150}"
num="${num:-1}"

restart_fd_server

create_vale_persistent_port "v0" "vale0"
# Pre-opening interface that will be needed. This is needed to avoid a race
# condition between the sending and receiving ports.
./functional -i vale0:v0    &>/dev/null
check_exit $? "pre-open vale0:v0"
./functional -i netmap:v0/t &>/dev/null
check_exit $? "pre-open netmap:v0/t"
./functional -i vale0:v1    &>/dev/null
check_exit $? "pre-open vale0:v1"

# First we send without reading from v1
./functional -i netmap:v0/t -r "${len}:${fill}:${num}" &>/dev/null &
p1=$!
./functional -i vale0:v0    -t "${len}:${fill}:${num}" &>/dev/null
e2=$?
wait $p1
e1=$?
check_exit $e1 "receive-${num} netmap:v0/t"
check_exit $e2 "send-${num} vale0:v0"

# Then we read from v1
./functional -i vale0:v1 -r "${len}:${fill}:${num}" &>/dev/null
e3=$?
check_exit $e3 "receive-${num} vale0:v1"

echo "Test successful."